<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度
    %msg：日志消息，%n是换行符-->
    <property name="pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %c [%thread]%-5level %msg%n"/>
    <property name="log_dir" value="d:/logs"></property>

    <!--
    	Appender: 设置日志信息的去向,常用的有以下几个
        ch.qos.logback.core.ConsoleAppender (控制台)
        ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)
        ch.qos.logback.core.FileAppender (文件)
        -->

    <!--appender自己不可以定义输出级别，但是可以通过过滤器的方式 实现自己独立的级别-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--输出流对象 默认 System.out 改为 System.err-->
        <target>System.err</target>
        <!--日志格式配置-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <appender name="file" class="ch.qos.logback.core.FileAppender">
        <!--日志格式配置-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
        <!--日志输出路径-->
        <file>${log_dir}/logback.log</file>
    </appender>

    <appender name="roll" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志格式配置-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
        <file>${log_dir}/rollingLogback.log</file>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--滚动文件最大大小 单位 KB-->
            <maxFileSize>1KB</maxFileSize>
            <maxHistory>3</maxHistory>
            <fileNamePattern>${log_dir}/rolling.%d{yyyy-MM-dd}.log%i.gz</fileNamePattern>
        </rollingPolicy>
    </appender>
    <!--
  用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
                    <loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性
                    name:
        用来指定受此logger约束的某一个包或者具体的某一个类。
            level:
        用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和
            OFF，
            如果未设置此属性，那么当前logger将会继承上级的级别。
            additivity:
        是否向上级loger传递打印信息。默认是true。
            <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个
            logger
            -->
    <!--
            也是<logger>元素，但是它是根logger。默认debug
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL
                和 OFF，
                <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个
                logger。
        -->


<!--设置异步 apperder 将其他的appender 添加进去-->
    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
        <appender-ref ref="roll"/>
    </appender>


<!--    配置自己自定义的logger-->
<!--    这里配置的-->
    <logger name="com.chen" level="warn">
<!--        这一行决定 自定义的logger是否添加根处理器-->
        <additive>false</additive>
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
        <appender-ref ref="roll"/>

    </logger>


    <root level="ALL">
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
        <appender-ref ref="roll"/>
    </root>
</configuration>